
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package network

import "github.com/joernweissenborn/eventual2go"



type PackageCompleter struct {
	*eventual2go.Completer
}

func NewPackageCompleter() *PackageCompleter {
	return &PackageCompleter{eventual2go.NewCompleter()}
}

func (c *PackageCompleter) Complete(d Package) {
	c.Completer.Complete(d)
}

func (c *PackageCompleter) Future() *PackageFuture {
	return &PackageFuture{c.Completer.Future()}
}

type PackageFuture struct {
	*eventual2go.Future
}

func (f *PackageFuture) Result() Package {
	return f.Future.Result().(Package)
}

type PackageCompletionHandler func(Package) Package

func (ch PackageCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(Package))
	}
}

func (f *PackageFuture) Then(ch PackageCompletionHandler) *PackageFuture {
	return &PackageFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *PackageFuture) AsChan() chan Package {
	c := make(chan Package, 1)
	cmpl := func(d chan Package) PackageCompletionHandler {
		return func(e Package) Package {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan Package) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type PackageStreamController struct {
	*eventual2go.StreamController
}

func NewPackageStreamController() *PackageStreamController {
	return &PackageStreamController{eventual2go.NewStreamController()}
}

func (sc *PackageStreamController) Add(d Package) {
	sc.StreamController.Add(d)
}

func (sc *PackageStreamController) Join(s *PackageStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *PackageStreamController) JoinFuture(f *PackageFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *PackageStreamController) Stream() *PackageStream {
	return &PackageStream{sc.StreamController.Stream()}
}

type PackageStream struct {
	*eventual2go.Stream
}

type PackageSubscriber func(Package)

func (l PackageSubscriber) toSubscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(Package)) }
}

func (s *PackageStream) Listen(ss PackageSubscriber) *eventual2go.Completer {
	return s.Stream.Listen(ss.toSubscriber())
}

func (s *PackageStream) ListenNonBlocking(ss PackageSubscriber) *eventual2go.Completer {
	return s.Stream.ListenNonBlocking(ss.toSubscriber())
}

type PackageFilter func(Package) bool

func (f PackageFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(Package)) }
}

func toPackageFilterArray(f ...PackageFilter) (filter []eventual2go.Filter){

	filter = make([]eventual2go.Filter, len(f))
	for i, el := range f {
		filter[i] = el.toFilter()
	}
	return
}

func (s *PackageStream) Where(f ...PackageFilter) *PackageStream {
	return &PackageStream{s.Stream.Where(toPackageFilterArray(f...)...)}
}

func (s *PackageStream) WhereNot(f ...PackageFilter) *PackageStream {
	return &PackageStream{s.Stream.WhereNot(toPackageFilterArray(f...)...)}
}

func (s *PackageStream) TransformWhere(t eventual2go.Transformer, f ...PackageFilter) *eventual2go.Stream {
	return s.Stream.TransformWhere(t, toPackageFilterArray(f...)...)
}

func (s *PackageStream) Split(f PackageFilter) (*PackageStream, *PackageStream)  {
	return s.Where(f), s.WhereNot(f)
}

func (s *PackageStream) First() *PackageFuture {
	return &PackageFuture{s.Stream.First()}
}

func (s *PackageStream) FirstWhere(f... PackageFilter) *PackageFuture {
	return &PackageFuture{s.Stream.FirstWhere(toPackageFilterArray(f...)...)}
}

func (s *PackageStream) FirstWhereNot(f ...PackageFilter) *PackageFuture {
	return &PackageFuture{s.Stream.FirstWhereNot(toPackageFilterArray(f...)...)}
}

func (s *PackageStream) AsChan() (c chan Package, stop *eventual2go.Completer) {
	c = make(chan Package)
	stop = s.Listen(pipeToPackageChan(c))
	stop.Future().Then(closePackageChan(c))
	return
}

func pipeToPackageChan(c chan Package) PackageSubscriber {
	return func(d Package) {
		c <- d
	}
}

func closePackageChan(c chan Package) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}

type PackageCollector struct {
	*eventual2go.Collector
}

func NewPackageCollector() *PackageCollector {
	return &PackageCollector{eventual2go.NewCollector()}
}

func (c *PackageCollector) Add(d Package) {
	c.Collector.Add(d)
}

func (c *PackageCollector) AddFuture(f *PackageFuture) {
	c.Collector.Add(f.Future)
}

func (c *PackageCollector) AddStream(s *PackageStream) {
	c.Collector.AddStream(s.Stream)
}

func (c *PackageCollector) Get() Package {
	return c.Collector.Get().(Package)
}

func (c *PackageCollector) Preview() Package {
	return c.Collector.Preview().(Package)
}

type PackageObservable struct {
	*eventual2go.Observable
}

func (o *PackageObservable) Value() Package {
	return o.Observable.Value().(Package)
}

func (o *PackageObservable) Change(value Package) {
	o.Observable.Change(value)
}

func (o *PackageObservable) OnChange(s PackageSubscriber) (cancel *eventual2go.Completer) {
	return o.OnChange(s)
}

func (o *PackageObservable) Stream() (*PackageStream) {
	return &PackageStream{o.Observable.Stream()}
}


func (o *PackageObservable) AsChan() (c chan Package, cancel *eventual2go.Completer) {
	return o.Stream().AsChan()
}

func (o *PackageObservable) NextChange() (f *PackageFuture) {
	return o.Stream().First()
}
