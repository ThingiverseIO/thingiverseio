
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package network

import "github.com/joernweissenborn/eventual2go"



type ArrivalCompleter struct {
	*eventual2go.Completer
}

func NewArrivalCompleter() *ArrivalCompleter {
	return &ArrivalCompleter{eventual2go.NewCompleter()}
}

func (c *ArrivalCompleter) Complete(d Arrival) {
	c.Completer.Complete(d)
}

func (c *ArrivalCompleter) Future() *ArrivalFuture {
	return &ArrivalFuture{c.Completer.Future()}
}

type ArrivalFuture struct {
	*eventual2go.Future
}

func (f *ArrivalFuture) Result() Arrival {
	return f.Future.Result().(Arrival)
}

type ArrivalCompletionHandler func(Arrival) Arrival

func (ch ArrivalCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(Arrival))
	}
}

func (f *ArrivalFuture) Then(ch ArrivalCompletionHandler) *ArrivalFuture {
	return &ArrivalFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *ArrivalFuture) AsChan() chan Arrival {
	c := make(chan Arrival, 1)
	cmpl := func(d chan Arrival) ArrivalCompletionHandler {
		return func(e Arrival) Arrival {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan Arrival) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type ArrivalStreamController struct {
	*eventual2go.StreamController
}

func NewArrivalStreamController() *ArrivalStreamController {
	return &ArrivalStreamController{eventual2go.NewStreamController()}
}

func (sc *ArrivalStreamController) Add(d Arrival) {
	sc.StreamController.Add(d)
}

func (sc *ArrivalStreamController) Join(s *ArrivalStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *ArrivalStreamController) JoinFuture(f *ArrivalFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *ArrivalStreamController) Stream() *ArrivalStream {
	return &ArrivalStream{sc.StreamController.Stream()}
}

type ArrivalStream struct {
	*eventual2go.Stream
}

type ArrivalSubscriber func(Arrival)

func (l ArrivalSubscriber) toSubscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(Arrival)) }
}

func (s *ArrivalStream) Listen(ss ArrivalSubscriber) *eventual2go.Completer {
	return s.Stream.Listen(ss.toSubscriber())
}

type ArrivalFilter func(Arrival) bool

func (f ArrivalFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(Arrival)) }
}

func toArrivalFilterArray(f ...ArrivalFilter) (filter []eventual2go.Filter){

	filter = make([]eventual2go.Filter, len(f))
	for i, el := range f {
		filter[i] = el.toFilter()
	}
	return
}

func (s *ArrivalStream) Where(f ...ArrivalFilter) *ArrivalStream {
	return &ArrivalStream{s.Stream.Where(toArrivalFilterArray(f...)...)}
}

func (s *ArrivalStream) WhereNot(f ...ArrivalFilter) *ArrivalStream {
	return &ArrivalStream{s.Stream.WhereNot(toArrivalFilterArray(f...)...)}
}

func (s *ArrivalStream) TransformWhere(t eventual2go.Transformer, f ...ArrivalFilter) *eventual2go.Stream {
	return s.Stream.TransformWhere(t, toArrivalFilterArray(f...)...)
}

func (s *ArrivalStream) Split(f ArrivalFilter) (*ArrivalStream, *ArrivalStream)  {
	return s.Where(f), s.WhereNot(f)
}

func (s *ArrivalStream) First() *ArrivalFuture {
	return &ArrivalFuture{s.Stream.First()}
}

func (s *ArrivalStream) FirstWhere(f... ArrivalFilter) *ArrivalFuture {
	return &ArrivalFuture{s.Stream.FirstWhere(toArrivalFilterArray(f...)...)}
}

func (s *ArrivalStream) FirstWhereNot(f ...ArrivalFilter) *ArrivalFuture {
	return &ArrivalFuture{s.Stream.FirstWhereNot(toArrivalFilterArray(f...)...)}
}

func (s *ArrivalStream) AsChan() (c chan Arrival, stop *eventual2go.Completer) {
	c = make(chan Arrival)
	stop = s.Listen(pipeToArrivalChan(c))
	stop.Future().Then(closeArrivalChan(c))
	return
}

func pipeToArrivalChan(c chan Arrival) ArrivalSubscriber {
	return func(d Arrival) {
		c <- d
	}
}

func closeArrivalChan(c chan Arrival) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}

type ArrivalCollector struct {
	*eventual2go.Collector
}

func NewArrivalCollector() *ArrivalCollector {
	return &ArrivalCollector{eventual2go.NewCollector()}
}

func (c *ArrivalCollector) Add(d Arrival) {
	c.Collector.Add(d)
}

func (c *ArrivalCollector) AddFuture(f *ArrivalFuture) {
	c.Collector.Add(f.Future)
}

func (c *ArrivalCollector) AddStream(s *ArrivalStream) {
	c.Collector.AddStream(s.Stream)
}

func (c *ArrivalCollector) Get() Arrival {
	return c.Collector.Get().(Arrival)
}

func (c *ArrivalCollector) Preview() Arrival {
	return c.Collector.Preview().(Arrival)
}
