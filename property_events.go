
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package thingiverseio

import "github.com/joernweissenborn/eventual2go"



type PropertyCompleter struct {
	*eventual2go.Completer
}

func NewPropertyCompleter() *PropertyCompleter {
	return &PropertyCompleter{eventual2go.NewCompleter()}
}

func (c *PropertyCompleter) Complete(d Property) {
	c.Completer.Complete(d)
}

func (c *PropertyCompleter) Future() *PropertyFuture {
	return &PropertyFuture{c.Completer.Future()}
}

type PropertyFuture struct {
	*eventual2go.Future
}

func (f *PropertyFuture) Result() Property {
	return f.Future.Result().(Property)
}

type PropertyCompletionHandler func(Property) Property

func (ch PropertyCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(Property))
	}
}

func (f *PropertyFuture) Then(ch PropertyCompletionHandler) *PropertyFuture {
	return &PropertyFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *PropertyFuture) AsChan() chan Property {
	c := make(chan Property, 1)
	cmpl := func(d chan Property) PropertyCompletionHandler {
		return func(e Property) Property {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan Property) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type PropertyStreamController struct {
	*eventual2go.StreamController
}

func NewPropertyStreamController() *PropertyStreamController {
	return &PropertyStreamController{eventual2go.NewStreamController()}
}

func (sc *PropertyStreamController) Add(d Property) {
	sc.StreamController.Add(d)
}

func (sc *PropertyStreamController) Join(s *PropertyStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *PropertyStreamController) JoinFuture(f *PropertyFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *PropertyStreamController) Stream() *PropertyStream {
	return &PropertyStream{sc.StreamController.Stream()}
}

type PropertyStream struct {
	*eventual2go.Stream
}

type PropertySubscriber func(Property)

func (l PropertySubscriber) toSubscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(Property)) }
}

func (s *PropertyStream) Listen(ss PropertySubscriber) *eventual2go.Completer {
	return s.Stream.Listen(ss.toSubscriber())
}

type PropertyFilter func(Property) bool

func (f PropertyFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(Property)) }
}

func toPropertyFilterArray(f ...PropertyFilter) (filter []eventual2go.Filter){

	filter = make([]eventual2go.Filter, len(f))
	for i, el := range f {
		filter[i] = el.toFilter()
	}
	return
}

func (s *PropertyStream) Where(f ...PropertyFilter) *PropertyStream {
	return &PropertyStream{s.Stream.Where(toPropertyFilterArray(f...)...)}
}

func (s *PropertyStream) WhereNot(f ...PropertyFilter) *PropertyStream {
	return &PropertyStream{s.Stream.WhereNot(toPropertyFilterArray(f...)...)}
}

func (s *PropertyStream) TransformWhere(t eventual2go.Transformer, f ...PropertyFilter) *PropertyStream {
	return &PropertyStream{s.Stream.TransformWhere(t, toPropertyFilterArray(f...)...)}
}

func (s *PropertyStream) Split(f PropertyFilter) (*PropertyStream, *PropertyStream)  {
	return s.Where(f), s.WhereNot(f)
}

func (s *PropertyStream) First() *PropertyFuture {
	return &PropertyFuture{s.Stream.First()}
}

func (s *PropertyStream) FirstWhere(f... PropertyFilter) *PropertyFuture {
	return &PropertyFuture{s.Stream.FirstWhere(toPropertyFilterArray(f...)...)}
}

func (s *PropertyStream) FirstWhereNot(f ...PropertyFilter) *PropertyFuture {
	return &PropertyFuture{s.Stream.FirstWhereNot(toPropertyFilterArray(f...)...)}
}

func (s *PropertyStream) AsChan() (c chan Property, stop *eventual2go.Completer) {
	c = make(chan Property)
	stop = s.Listen(pipeToPropertyChan(c))
	stop.Future().Then(closePropertyChan(c))
	return
}

func pipeToPropertyChan(c chan Property) PropertySubscriber {
	return func(d Property) {
		c <- d
	}
}

func closePropertyChan(c chan Property) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}

type PropertyCollector struct {
	*eventual2go.Collector
}

func NewPropertyCollector() *PropertyCollector {
	return &PropertyCollector{eventual2go.NewCollector()}
}

func (c *PropertyCollector) Add(d Property) {
	c.Collector.Add(d)
}

func (c *PropertyCollector) AddFuture(f *PropertyFuture) {
	c.Collector.Add(f.Future)
}

func (c *PropertyCollector) AddStream(s *PropertyStream) {
	c.Collector.AddStream(s.Stream)
}

func (c *PropertyCollector) Get() Property {
	return c.Collector.Get().(Property)
}

func (c *PropertyCollector) Preview() Property {
	return c.Collector.Preview().(Property)
}
