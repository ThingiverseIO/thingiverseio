
/*
 * generated by event_generator
 *
 * DO NOT EDIT
 */

package messages

import "github.com/joernweissenborn/eventual2go"



type FlatMessageCompleter struct {
	*eventual2go.Completer
}

func NewFlatMessageCompleter() *FlatMessageCompleter {
	return &FlatMessageCompleter{eventual2go.NewCompleter()}
}

func (c *FlatMessageCompleter) Complete(d FlatMessage) {
	c.Completer.Complete(d)
}

func (c *FlatMessageCompleter) Future() *FlatMessageFuture {
	return &FlatMessageFuture{c.Completer.Future()}
}

type FlatMessageFuture struct {
	*eventual2go.Future
}

func (f *FlatMessageFuture) GetResult() FlatMessage {
	return f.Future.GetResult().(FlatMessage)
}

type FlatMessageCompletionHandler func(FlatMessage) FlatMessage

func (ch FlatMessageCompletionHandler) toCompletionHandler() eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		return ch(d.(FlatMessage))
	}
}

func (f *FlatMessageFuture) Then(ch FlatMessageCompletionHandler) *FlatMessageFuture {
	return &FlatMessageFuture{f.Future.Then(ch.toCompletionHandler())}
}

func (f *FlatMessageFuture) AsChan() chan FlatMessage {
	c := make(chan FlatMessage, 1)
	cmpl := func(d chan FlatMessage) FlatMessageCompletionHandler {
		return func(e FlatMessage) FlatMessage {
			d <- e
			close(d)
			return e
		}
	}
	ecmpl := func(d chan FlatMessage) eventual2go.ErrorHandler {
		return func(error) (eventual2go.Data, error) {
			close(d)
			return nil, nil
		}
	}
	f.Then(cmpl(c))
	f.Err(ecmpl(c))
	return c
}

type FlatMessageStreamController struct {
	*eventual2go.StreamController
}

func NewFlatMessageStreamController() *FlatMessageStreamController {
	return &FlatMessageStreamController{eventual2go.NewStreamController()}
}

func (sc *FlatMessageStreamController) Add(d FlatMessage) {
	sc.StreamController.Add(d)
}

func (sc *FlatMessageStreamController) Join(s *FlatMessageStream) {
	sc.StreamController.Join(s.Stream)
}

func (sc *FlatMessageStreamController) JoinFuture(f *FlatMessageFuture) {
	sc.StreamController.JoinFuture(f.Future)
}

func (sc *FlatMessageStreamController) Stream() *FlatMessageStream {
	return &FlatMessageStream{sc.StreamController.Stream()}
}

type FlatMessageStream struct {
	*eventual2go.Stream
}

type FlatMessageSubscriber func(FlatMessage)

func (l FlatMessageSubscriber) toSubscriber() eventual2go.Subscriber {
	return func(d eventual2go.Data) { l(d.(FlatMessage)) }
}

func (s *FlatMessageStream) Listen(ss FlatMessageSubscriber) *eventual2go.Completer {
	return s.Stream.Listen(ss.toSubscriber())
}

type FlatMessageFilter func(FlatMessage) bool

func (f FlatMessageFilter) toFilter() eventual2go.Filter {
	return func(d eventual2go.Data) bool { return f(d.(FlatMessage)) }
}

func toFlatMessageFilterArray(f ...FlatMessageFilter) (filter []eventual2go.Filter){

	filter = make([]eventual2go.Filter, len(f))
	for i, el := range f {
		filter[i] = el.toFilter()
	}
	return
}

func (s *FlatMessageStream) Where(f ...FlatMessageFilter) *FlatMessageStream {
	return &FlatMessageStream{s.Stream.Where(toFlatMessageFilterArray(f...)...)}
}

func (s *FlatMessageStream) WhereNot(f ...FlatMessageFilter) *FlatMessageStream {
	return &FlatMessageStream{s.Stream.WhereNot(toFlatMessageFilterArray(f...)...)}
}

func (s *FlatMessageStream) Split(f FlatMessageFilter) (*FlatMessageStream, *FlatMessageStream)  {
	return s.Where(f), s.WhereNot(f)
}

func (s *FlatMessageStream) First() *FlatMessageFuture {
	return &FlatMessageFuture{s.Stream.First()}
}

func (s *FlatMessageStream) FirstWhere(f... FlatMessageFilter) *FlatMessageFuture {
	return &FlatMessageFuture{s.Stream.FirstWhere(toFlatMessageFilterArray(f...)...)}
}

func (s *FlatMessageStream) FirstWhereNot(f ...FlatMessageFilter) *FlatMessageFuture {
	return &FlatMessageFuture{s.Stream.FirstWhereNot(toFlatMessageFilterArray(f...)...)}
}

func (s *FlatMessageStream) AsChan() (c chan FlatMessage, stop *eventual2go.Completer) {
	c = make(chan FlatMessage)
	stop = s.Listen(pipeToFlatMessageChan(c))
	stop.Future().Then(closeFlatMessageChan(c))
	return
}

func pipeToFlatMessageChan(c chan FlatMessage) FlatMessageSubscriber {
	return func(d FlatMessage) {
		c <- d
	}
}

func closeFlatMessageChan(c chan FlatMessage) eventual2go.CompletionHandler {
	return func(d eventual2go.Data) eventual2go.Data {
		close(c)
		return nil
	}
}

type FlatMessageCollector struct {
	*eventual2go.Collector
}

func NewFlatMessageCollector() *FlatMessageCollector {
	return &FlatMessageCollector{eventual2go.NewCollector()}
}

func (c *FlatMessageCollector) Add(d FlatMessage) {
	c.Collector.Add(d)
}

func (c *FlatMessageCollector) AddFuture(f *FlatMessageFuture) {
	c.Collector.Add(f.Future)
}

func (c *FlatMessageCollector) AddStream(s *FlatMessageStream) {
	c.Collector.AddStream(s.Stream)
}

func (c *FlatMessageCollector) Get() FlatMessage {
	return c.Collector.Get().(FlatMessage)
}

func (c *FlatMessageCollector) Preview() FlatMessage {
	return c.Collector.Preview().(FlatMessage)
}
